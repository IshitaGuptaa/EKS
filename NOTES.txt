I AM USING RHEL 7.5 for my work

STEP1:  Create AWS account, then from root account(default) make one user profile , give admin property or give it eksclusterPolicy, save the credentials. 
STEP2: aws-cli download 
	command: curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
 
	command: unzip awscli-bundle.zip

	command: sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws

	command: sudo /usr/local/bin/python3.7 awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
	
	command: aws --version (Check once)

 
STEP3: aws configure , Enter Access key, private key and region as is mentined in the cred file, we saved.
STEP4: for eks we can either use aws eks, but it is very tedious to handle. We have another alternate present that provides better functionality, ease and more advance features viz "eksctl"
	
	command: curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp

	command: sudo mv /tmp/eksctl /usr/local/bin

	command: eksctl version (Check once)

STEP5: apply cluster.yml, this will call cloud formation in backgroud (teraform like AWS feature), 
 	
	command: eksctl create cluster -f cluster.yml

// To store the output in a file for later reference we can also use tee command
	command: eksctl create cluster -f cluster.yml | tee output.txt

STEP5: You can check the cluster-info and config view of kubectl using following commad

	command: kubectl config view
	command: kubectl cluster-info

STEP6: update configuration of aws using follwoing command

	commad: aws update-kubeconfig --name IishitaCluster1 
Configures kubectl so that you can connect to an Amazon EKS cluster.

STEP7: Create your own namespace

	command: kubectl create namespace eksdemo
note: the namespace should be all small letters

STEP8: Now in the config file we can also setup what namespace we will be using by default, we set this info in the context block, either we go inside config file and change it manually or we use cli command

	command: kubectl config set-context --current --namespace=eksdemo
// That is in the current context set this namespace as default.

STEP9: Now our basic setup is ready , but let's make it more efficient. We can add spo-instance in our system. which will be like a alarm or metric on instance, such that if instance exceeds certain limit mentioned , then it will either stop, terminate or hibernate the system. This is very cost efficient.


{NOTE:  TO DELETE CLUSTER USE     "eksctl delete cluster --region=ap-south-1 --name=IshitaCluster1", DELETE SSH KEYS MANUALLY IN AWS WEB UI, DELETE VPC,SECURITY GROUPS, ETC.. IF NOT DELETED}






















STEP-10: Like yum we have helm in kubernetes that acts as repo. We have helm hub like Docker hub or GitHub. Like linux we have software  in Helm we have charts 

It has two componenets viz Tiller(Server) and Helm(Client)

Download and instal Tiller and Helm softwares
	
	command: wget https://get.helm.sh/helm-v2.16.9-linux-amd64.tar.gz
	command: tar -zxvf  helm-v2.16.9-linux-amd64.tar.gz
	command: mv linux-amd64/helm /usr/local/bin/helm

STEP 11: Now we will setup account and put tiller in use.

	command: kubectl -n kube-system create serviceaccount tiller
	command: kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller
	command: helm init --service-account tiller --upgrade


